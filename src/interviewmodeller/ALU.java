/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interviewmodeller;


import javax.swing.JOptionPane;
import javax.swing.JTable;


/**
 *
 * @author mortimer
 */
public class ALU extends javax.swing.JFrame {

    /**
     * Creates new form ALU
     */
    public ALU() {
        initComponents();
   
    }
    public static  final String IF_OPEN ="{";public static final String IF_CLOSE="}";
    public static final String IF_TRUE="IF0 == TRUE"; public static final String IF_FALSE= "IF0 == FALSE";
    public static final char IF_OPEN_CHAR='{';public static final char IF_CLOSE_CHAR='}';
    public static final String HALT ="HALT"; public static final String COMMAND_SEP=",";
    int currentLine;
    public static final String LOAD="LOAD"; public static final String SWAP="SWAP";
    public static final String SEP_PARAMETERS=";"; public static final String ADD="ADD";
    public static final String NEG ="NEG"; public static final String LOOP="LOOP";
    public static final String LINE_SHOW="Line ";public static final String END_OF_LINE=": ";
    int lineNo=1;
    public static final String SEP_BOXES="&";
    String[][]shelfContents;
    String display[][];
    public void updateTableToMatchShelfContents(){
        final String[] COLUMN_NAMES={"Shelf Number","Boxes"};
        display= new String[shelfContents.length][2];
        String buff;
        for(int y=0;y<display.length;y++){
            display[y][0]=shelfContents[display.length-y-1][0];
            display[y][1]=shelfContents[display.length-y-1][1];
        }
        JTable t = new JTable(display, COLUMN_NAMES);
        shelfTable.setModel(t.getModel());
        shelfTable.setDefaultEditor(Object.class, null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        shelfTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        commandsArea = new javax.swing.JTextArea();
        if0TrueBtn = new javax.swing.JButton();
        if0FalseBtn = new javax.swing.JButton();
        haltBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        loadTxt = new javax.swing.JTextField();
        swapBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        addShelfATxt = new javax.swing.JTextField();
        swapShelfBTxt = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        swapShelfATxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        addShelfBTxt = new javax.swing.JTextField();
        negBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        negShelfTxt = new javax.swing.JTextField();
        exitBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        xPlusY = new javax.swing.JButton();
        absBtn = new javax.swing.JButton();
        loopToLineBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        lineNoTxt = new javax.swing.JTextField();
        infortmationBtn = new javax.swing.JButton();
        runBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        xTimesYBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Shelves / Low Level Machine");

        shelfTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Shelf Number", "Boxes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(shelfTable);

        commandsArea.setEditable(false);
        commandsArea.setColumns(20);
        commandsArea.setRows(5);
        jScrollPane2.setViewportView(commandsArea);

        if0TrueBtn.setText("IF0 == TRUE");
        if0TrueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if0TrueBtnActionPerformed(evt);
            }
        });

        if0FalseBtn.setText("IF0 == FALSE");
        if0FalseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if0FalseBtnActionPerformed(evt);
            }
        });

        haltBtn.setText("HALT");
        haltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                haltBtnActionPerformed(evt);
            }
        });

        loadBtn.setText("LOAD");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Load");

        swapBtn.setText("SWAP");
        swapBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swapBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Shelf Number A");

        jLabel4.setText("Shelf Number B");

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Shelf Number A");

        jLabel6.setText("Shelf Number B");

        negBtn.setText("NEG");
        negBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("Shelf Number");

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        xPlusY.setText("X + Y at Zero");
        xPlusY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xPlusYActionPerformed(evt);
            }
        });

        absBtn.setText("|X|=|Y|?");
        absBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absBtnActionPerformed(evt);
            }
        });

        loopToLineBtn.setText("Loop To Line");
        loopToLineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopToLineBtnActionPerformed(evt);
            }
        });

        jLabel8.setText("Line No (First Line =1)");

        infortmationBtn.setText("Information on Problem");
        infortmationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infortmationBtnActionPerformed(evt);
            }
        });

        runBtn.setText("Run Code");
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        jLabel9.setText("Hint: Use If in conjunction with loop to create an if else statement");

        xTimesYBtn.setText("X * Y (x>=0 and y>=0)");
        xTimesYBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xTimesYBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(435, 435, 435)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(70, 70, 70))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(if0TrueBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(if0FalseBtn)
                                        .addGap(51, 51, 51)
                                        .addComponent(haltBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(loopToLineBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8))
                                        .addGap(18, 18, 18)
                                        .addComponent(lineNoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(165, 165, 165)
                                        .addComponent(swapBtn))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(442, 442, 442)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(loadBtn)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(loadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(swapShelfATxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(swapShelfBTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(122, 122, 122)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addShelfBTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(addShelfATxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(negShelfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(addBtn))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(exitBtn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(resetBtn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(xPlusY)))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(absBtn)
                                .addGap(52, 52, 52)
                                .addComponent(xTimesYBtn)))
                        .addGap(18, 18, 18)
                        .addComponent(runBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(infortmationBtn)
                    .addComponent(negBtn))
                .addGap(72, 72, 72))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(xPlusY)
                        .addGap(18, 18, 18)
                        .addComponent(exitBtn)
                        .addGap(32, 32, 32)
                        .addComponent(resetBtn)
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(lineNoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(if0TrueBtn)
                            .addComponent(if0FalseBtn)
                            .addComponent(haltBtn)
                            .addComponent(addBtn)
                            .addComponent(negBtn)
                            .addComponent(swapBtn))
                        .addGap(5, 5, 5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(runBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(infortmationBtn)
                                .addGap(38, 38, 38))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(absBtn)
                                            .addComponent(xTimesYBtn))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel9))
                                    .addComponent(loopToLineBtn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addComponent(loadBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(loadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(addShelfATxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(swapShelfATxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(negShelfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(swapShelfBTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(addShelfBTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        try{
            int a = Integer.parseInt(loadTxt.getText());
            String txt=commandsArea.getText();
            if(areIfsOnCurrentLineEnded()){
                if(txt.equals("")){
                    txt = LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+LOAD+SEP_PARAMETERS+loadTxt.getText()+COMMAND_SEP;
                }else{
                    txt = txt +System.lineSeparator()+LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+LOAD+SEP_PARAMETERS+loadTxt.getText()+COMMAND_SEP;
                }
                lineNo++;
            }else{
                txt = txt +LOAD+SEP_PARAMETERS+loadTxt.getText()+COMMAND_SEP+IF_CLOSE;
            }
            commandsArea.setText(txt);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "The loaded value must be an integer", "Error", JOptionPane.OK_OPTION);
        }
        updateIfBtns();
    }//GEN-LAST:event_loadBtnActionPerformed

    private void haltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_haltBtnActionPerformed
        String txt=commandsArea.getText();
        if(areIfsOnCurrentLineEnded()){
            if(txt.equals("")){
                txt = LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+HALT+COMMAND_SEP;
            }else{
                txt = txt +System.lineSeparator()+LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+HALT+COMMAND_SEP;
            }
            lineNo++;
        }else{
            txt = txt +HALT+COMMAND_SEP+IF_CLOSE;
        }
        commandsArea.setText(txt);
        updateIfBtns();
    }//GEN-LAST:event_haltBtnActionPerformed

    private void if0FalseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_if0FalseBtnActionPerformed
        String txt = commandsArea.getText();
        if(areIfsOnCurrentLineEnded()){
            if(txt.equals("")){
                txt = LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+IF_FALSE+IF_OPEN;
            }else{
                txt = txt +System.lineSeparator()+LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+IF_FALSE+IF_OPEN;
            }
            lineNo++;
        }else{
            txt = txt +IF_FALSE+IF_OPEN;
        }
        commandsArea.setText(txt);
        updateIfBtns();
   
    }//GEN-LAST:event_if0FalseBtnActionPerformed

    private void if0TrueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_if0TrueBtnActionPerformed
        String txt = commandsArea.getText();
        if(areIfsOnCurrentLineEnded()){
            if(txt.equals("")){
                txt = LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+IF_TRUE+IF_OPEN;
            }else{
                txt = txt +System.lineSeparator()+LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+IF_TRUE+IF_OPEN;
            }
            lineNo++;
        }else{
            txt = txt +IF_CLOSE;//IF_TRUE+IF_OPEN;
        }
        commandsArea.setText(txt);
        updateIfBtns();

    }//GEN-LAST:event_if0TrueBtnActionPerformed
public void updateIfBtns(){
    String txt =commandsArea.getText();
    boolean i = areIfsOnCurrentLineEnded();
    if0FalseBtn.setEnabled(i);if0TrueBtn.setEnabled(i);
 
}
    private void swapBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapBtnActionPerformed
        try{
            int a = Integer.parseInt(swapShelfATxt.getText());
            int b = Integer.parseInt(swapShelfBTxt.getText());
            if(a<0||b<0){
                JOptionPane.showMessageDialog(this, "The shelf numbers must can not be less than zero.", "Error", JOptionPane.OK_OPTION);
                return;
            }
            String txt=commandsArea.getText();
            if(areIfsOnCurrentLineEnded()){
                if(txt.equals("")){
                    txt = LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+SWAP+SEP_PARAMETERS+swapShelfATxt.getText()+SEP_PARAMETERS+swapShelfBTxt.getText()+COMMAND_SEP;
                }else{
                    txt = txt +System.lineSeparator()+LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+SWAP+SEP_PARAMETERS+swapShelfATxt.getText()+SEP_PARAMETERS+swapShelfBTxt.getText()+COMMAND_SEP;
                }
                lineNo++;
            }else{
                txt = txt +SWAP+SEP_PARAMETERS+swapShelfATxt.getText()+SEP_PARAMETERS+swapShelfBTxt.getText()+COMMAND_SEP+IF_CLOSE;
            }
            commandsArea.setText(txt);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "The shelf numbers must be integers.", "Error", JOptionPane.OK_OPTION);
        }
        updateIfBtns();
    }//GEN-LAST:event_swapBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
                try{
            int a = Integer.parseInt(addShelfATxt.getText());
            int b = Integer.parseInt(addShelfBTxt.getText());
            if(a<0||b<0){
                JOptionPane.showMessageDialog(this, "The shelf numbers must can not be less than zero.", "Error", JOptionPane.OK_OPTION);
                return;
            }
            String txt=commandsArea.getText();
            if(areIfsOnCurrentLineEnded()){
                if(txt.equals("")){
                    txt = LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+ADD+SEP_PARAMETERS+addShelfATxt.getText()+SEP_PARAMETERS+addShelfBTxt.getText()+COMMAND_SEP;
                }else{
                    txt = txt +System.lineSeparator()+LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+ADD+SEP_PARAMETERS+addShelfATxt.getText()+SEP_PARAMETERS+addShelfBTxt.getText()+COMMAND_SEP;
                }
                lineNo++;
            }else{
                txt = txt +ADD+SEP_PARAMETERS+addShelfATxt.getText()+SEP_PARAMETERS+addShelfBTxt.getText()+COMMAND_SEP+IF_CLOSE;
            }
            commandsArea.setText(txt);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "The shelf numbers must be integers.", "Error", JOptionPane.OK_OPTION);
        }
                updateIfBtns();
    }//GEN-LAST:event_addBtnActionPerformed

    private void negBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negBtnActionPerformed
                        try{
            int a = Integer.parseInt(negShelfTxt.getText());
            if(a<0){
                JOptionPane.showMessageDialog(this, "The shelf number must can not be less than zero.", "Error", JOptionPane.OK_OPTION);
                return;
            }
            String txt=commandsArea.getText();
            if(areIfsOnCurrentLineEnded()){
                if(txt.equals("")){
                    txt = LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+NEG+SEP_PARAMETERS+negShelfTxt.getText()+COMMAND_SEP;
                }else{
                    txt = txt +System.lineSeparator()+LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+NEG+SEP_PARAMETERS+negShelfTxt.getText()+COMMAND_SEP;
                }
                lineNo++;
            }else{
                txt = txt +NEG+SEP_PARAMETERS+negShelfTxt.getText()+COMMAND_SEP+IF_CLOSE;
            }
            commandsArea.setText(txt);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "The shelf number must be an integer.", "Error", JOptionPane.OK_OPTION);
        }
                        updateIfBtns();
    }//GEN-LAST:event_negBtnActionPerformed

    private void loopToLineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopToLineBtnActionPerformed
                                try{
            int a = Integer.parseInt(lineNoTxt.getText());
            if(a<=0){
                JOptionPane.showMessageDialog(this, "The line number must be an integer greater than zero.", "Error", JOptionPane.OK_OPTION);
                return;
            }
            String txt=commandsArea.getText();
            if(areIfsOnCurrentLineEnded()){
                if(txt.equals("")){
                    txt = LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+LOOP+SEP_PARAMETERS+lineNoTxt.getText()+COMMAND_SEP;
                }else{
                    txt = txt +System.lineSeparator()+LINE_SHOW+String.valueOf(lineNo)+END_OF_LINE+LOOP+SEP_PARAMETERS+lineNoTxt.getText()+COMMAND_SEP;
                }
                lineNo++;
            }else{
                txt = txt +LOOP+SEP_PARAMETERS+lineNoTxt.getText()+COMMAND_SEP+IF_CLOSE;
            }
            commandsArea.setText(txt);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "The line number must be an integer.", "Error", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_loopToLineBtnActionPerformed
    public void updateYValuesOfShelfContentsArray(){
        for(int y=0;y<shelfContents.length;y++){
            shelfContents[y][0]=String.valueOf(y);
        }
    }
    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed
        shelfContents=new String[4][2];updateYValuesOfShelfContentsArray();
        updateTableToMatchShelfContents();
        double time=System.currentTimeMillis();double timeNew;
        if(commandsArea.getText().equals("")){
            return;
        }
        String text[]=commandsArea.getText().split(System.lineSeparator()); currentLine=-1;
        while (true){
            currentLine++;
            if(currentLine>=text.length){
                break;
            }
            timeNew=System.currentTimeMillis();
            if((timeNew-time)/1000.0>=10){
                time = timeNew;
                int ans=JOptionPane.showConfirmDialog(this, "It has been 10 or more seconds since execution started and the last interuption. It may be that the program loops infinitely. Would you like to keep running the program? Press YES to continue amd NO to stop.", "Continue?",JOptionPane.YES_NO_OPTION );
                if(ans==JOptionPane.NO_OPTION){
                    return;
                }
            }
            String code="";
            if(hasAnIfStatementOnLine(text[currentLine])){
                boolean isTrueState=text[currentLine].contains(IF_TRUE);
                boolean isZero = ifZero();
                if(isZero==isTrueState){
                    int ch=0;
                    for(ch=ch;ch<text[currentLine].length();ch++){
                        if(String.valueOf(text[currentLine].charAt(ch)).equals(IF_OPEN)){
                            ch++;
                            break;
                        }
                    }
                    for(ch=ch;ch<text[currentLine].length();ch++){
                        if(!String.valueOf(text[currentLine].charAt(ch)).equals(IF_CLOSE)){
                            code=code+String.valueOf(text[currentLine].charAt(ch));
                        }else{
                            break;
                        }
                    }
                    boolean halt =executeLineOfCode(code,text);
                    if(halt){
                        break;
                    }
                }else{
                    continue;
                }
            }else{
                int ch=2;String prevTwoChars=String.valueOf(text[currentLine].charAt(0)) +String.valueOf(text[currentLine].charAt(1));
                String ne="";
                for(ch=ch;ch<text[currentLine].length();ch++){
                    if(prevTwoChars.equals(END_OF_LINE)){
                        break;
                    }
                    else{
                        prevTwoChars = String.valueOf(prevTwoChars.charAt(1))+String.valueOf(text[currentLine].charAt(ch));
                    }
                }
                for( ch=ch;ch<text[currentLine].length();ch++){
                    code = code+String.valueOf(text[currentLine].charAt(ch));
                }
                boolean halt =executeLineOfCode(code,text);
                if(halt){
                    break;
                }
            }
            updateTableToMatchShelfContents();
        }
        currentLine=-1;
        updateTableToMatchShelfContents();
    }//GEN-LAST:event_runBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        commandsArea.setText("");        shelfContents=new String[4][2];updateYValuesOfShelfContentsArray();
        updateTableToMatchShelfContents();
        lineNo=1;
        
    }//GEN-LAST:event_resetBtnActionPerformed

    private void infortmationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infortmationBtnActionPerformed
        JOptionPane.showMessageDialog(this,"This is a system that emulates low level programming. Programming invlolves six defined commands "+
                System.lineSeparator()+"ADD - Adds the contents of two shelves togethers (which contain integers) in every possible way"
        +System.lineSeparator()+"LOAD - loads an integer value into shelf 0 "
        +System.lineSeparator()+"HALT - halts program execution"
        +System.lineSeparator()+"NEG- negates the values of a a given shelf number and stores the results at shelf 0"
        +System.lineSeparator()+"SWAP - swaps the contents of two shelves"
        +System.lineSeparator()+"IF0- checks to see if any of the values at shelf 0 equal zero. Returns true or false"
        +System.lineSeparator()+"LOOP - loops to a given line of code. Used to recreate the idea of a flowchart. Typically should be used in conjunction with IF0 to create if else conditions"
        +System.lineSeparator()+"Each time the code is ran, everything starts off as empty. This is an imperfect system and not the most usable thing in the world, but is useful for those expirmenting with low level coding"+
                System.lineSeparator()+"NOTE: THE INSPIRATION FOR THIS SYSTEM HAS NOT BEEN SHARED WITH ANYONE AND WILL NOT BE SHARED WITH ANYONE");
    }//GEN-LAST:event_infortmationBtnActionPerformed

    private void absBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absBtnActionPerformed
        JOptionPane.showMessageDialog(this, "This program should halt if |x|=|y| and loop infinitely otherwise");
        String xS =JOptionPane.showInputDialog(this,"Please input the value of x (must be an integer)");
        int x=0;
        try{
            x=Integer.parseInt(xS);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Input value must be an integer");
            return;
        }
        String yS =JOptionPane.showInputDialog(this,"Please input the value of y (must be an integer)");
        int y=0;
        try{
            y=Integer.parseInt(yS);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Input value must be an integer");
            return;
        }
        resetBtn.doClick();
        loadTxt.setText(String.valueOf(x));
        loadBtn.doClick();
        swapShelfATxt.setText("0");swapShelfBTxt.setText("1");swapBtn.doClick();
        loadTxt.setText(String.valueOf(y));loadBtn.doClick();
        swapShelfATxt.setText("0");swapShelfBTxt.setText("2");swapBtn.doClick();
        addShelfATxt.setText("1");addShelfBTxt.setText("2");addBtn.doClick();
        if0TrueBtn.doClick();
        haltBtn.doClick();
        negShelfTxt.setText("2");
        negBtn.doClick();
        addShelfATxt.setText("1");addShelfBTxt.setText("0");addBtn.doClick();
        if0TrueBtn.doClick();haltBtn.doClick();
        lineNoTxt.setText(String.valueOf(lineNo-1));loopToLineBtn.doClick();
        setTextInputsBlank();
    }//GEN-LAST:event_absBtnActionPerformed
public void setTextInputsBlank(){
    loadTxt.setText("");swapShelfATxt.setText("");swapShelfBTxt.setText("");
    addShelfATxt.setText("");addShelfBTxt.setText("");negShelfTxt.setText("");lineNoTxt.setText("");
}
    private void xPlusYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xPlusYActionPerformed
        JOptionPane.showMessageDialog(this,"Puts x+y at shelf 0");
        String xS =JOptionPane.showInputDialog(this,"Please input the value of x (must be an integer)");
        int x=0;
        try{
            x=Integer.parseInt(xS);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Input value must be an integer");
            return;
        }
        String yS =JOptionPane.showInputDialog(this,"Please input the value of y (must be an integer)");
        int y=0;
        try{
            y=Integer.parseInt(yS);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Input value must be an integer");
            return;
        }
        resetBtn.doClick();
        loadTxt.setText(String.valueOf(x));loadBtn.doClick();
        swapShelfATxt.setText("0");swapShelfBTxt.setText("1");
        swapBtn.doClick();
        loadTxt.setText(String.valueOf(y));loadBtn.doClick();
        addShelfATxt.setText("1");addShelfBTxt.setText("0");addBtn.doClick();
        haltBtn.doClick();
        setTextInputsBlank();
    }//GEN-LAST:event_xPlusYActionPerformed

    private void xTimesYBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xTimesYBtnActionPerformed
        JOptionPane.showMessageDialog(this,"Puts x*y at shelf 0. Works for values of x and y greather than or equal to 0");
        String xS =JOptionPane.showInputDialog(this,"Please input the value of x (must be an integer)");
        int x=0;
        try{
            x=Integer.parseInt(xS);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Input value must be an integer");
            return;
        }
        String yS =JOptionPane.showInputDialog(this,"Please input the value of y (must be an integer)");
        int y=0;
        try{
            y=Integer.parseInt(yS);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Input value must be an integer");
            return;
        }
        if(y<0||x<0){
            JOptionPane.showMessageDialog(this,"X and Y must both be greater than or equal to 0.");
            return;
        }
        resetBtn.doClick();
        loadTxt.setText(String.valueOf(x));loadBtn.doClick();
        if0TrueBtn.doClick();haltBtn.doClick();
        swapShelfATxt.setText("1");swapShelfBTxt.setText("0");swapBtn.doClick();
        loadTxt.setText(String.valueOf(y));loadBtn.doClick();
        if0TrueBtn.doClick();haltBtn.doClick();
        swapShelfATxt.setText("2");swapShelfBTxt.setText("0");swapBtn.doClick();
        loadTxt.setText("0");loadBtn.doClick();
        swapShelfATxt.setText("3");swapShelfBTxt.setText("0");swapBtn.doClick();
        loadTxt.setText("-1");loadBtn.doClick();
        swapShelfATxt.setText("0");swapShelfBTxt.setText("4");swapBtn.doClick();
        addShelfATxt.setText("1");addShelfBTxt.setText("3");addBtn.doClick();
        swapShelfATxt.setText("0");swapShelfBTxt.setText("3");swapBtn.doClick();
        addShelfATxt.setText("4");addShelfBTxt.setText("2");addBtn.doClick();
        if0TrueBtn.doClick();lineNoTxt.setText("20");loopToLineBtn.doClick();
        swapShelfATxt.setText("0");swapShelfBTxt.setText("2");swapBtn.doClick();
        addShelfATxt.setText("1");addShelfBTxt.setText("3");addBtn.doClick();
        swapShelfATxt.setText("0");swapShelfBTxt.setText("3");swapBtn.doClick();
        addShelfATxt.setText("4");addShelfBTxt.setText("2");addBtn.doClick();
        if0FalseBtn.doClick();lineNoTxt.setText("15");loopToLineBtn.doClick();
        swapShelfATxt.setText("0");swapShelfBTxt.setText("3");swapBtn.doClick();
        haltBtn.doClick();
        setTextInputsBlank();
        
        
    }//GEN-LAST:event_xTimesYBtnActionPerformed
public boolean executeLineOfCode(String code,String[]text){
    if(code.contains(HALT)){
        return true;
    }
    if(code.contains(SWAP)){
        String buff="";int a;int b;
        int ch=0;
        for( ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(SEP_PARAMETERS)){
                ch++;
                break;
            }
        }
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(SEP_PARAMETERS)){
                ch++;
                break;
            }else{
                buff=buff+String.valueOf(code.charAt(ch));
            }
        }
        a = Integer.parseInt(buff);buff="";
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(COMMAND_SEP)){
                break;
            }else{
                buff=buff+String.valueOf(code.charAt(ch));
            }
        }
        b=Integer.parseInt(buff);
        makeSureShelfArrayIsLongEnough(Math.max(a,b));
        buff=shelfContents[b][1];
        shelfContents[b][1]=shelfContents[a][1];
        shelfContents[a][1]=buff;
        return false;
    }
    if(code.contains(LOOP)){
        int ch=0;String buff="";
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(SEP_PARAMETERS)){
                ch++;
                break;
            }
                
        }
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(COMMAND_SEP)){
                break;
            }else{
                buff=buff+String.valueOf(code.charAt(ch));
            }
        }     
        int ind =Integer.parseInt(buff)-1;
        if(ind>text.length-1){
            JOptionPane.showMessageDialog(this,"Loops to invalid line");
            return true;
        }
        currentLine=ind-1;
        return false;
    }
    if(code.contains(LOAD)){
        int ch=0;String buff="";
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(SEP_PARAMETERS)){
                ch++;
                break;
            }
        }
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(COMMAND_SEP)){
                break;
            }else{
                buff=buff+String.valueOf(code.charAt(ch));
            }
        }
        shelfContents[0][1]=buff;
        return false;
    }
    if(code.contains(NEG)){
        int ch=0;String buff="";
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(SEP_PARAMETERS)){
                ch++;
                break;
            }
        }
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(COMMAND_SEP)){
                break;
            }else{
                buff=buff+String.valueOf(code.charAt(ch));
            }
        }
        int shelfIn=Integer.parseInt(buff);
        makeSureShelfArrayIsLongEnough(shelfIn);
        try{
            boolean s=shelfContents[shelfIn][1].equals("");
            if(s==true){
                JOptionPane.showMessageDialog(this, "NEG command can't be called on an empty shelf");
                return true;
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "NEG command can't be called on an empty shelf");
            return true;
        }
        String[]cont=shelfContents[shelfIn][1].split(SEP_BOXES);
        String ne[]=new String[cont.length];
        for(int i=0;i<cont.length;i++){
            int v = Integer.parseInt(cont[i])*-1;
            ne[i]=String.valueOf(v);
        }
        String z=ne[0];
        for(int i=1;i<ne.length;i++){
            z=z+SEP_BOXES+ne[i];
        }
        shelfContents[0][1]=z;
        return false;
    }
    if(code.contains(ADD)){
        String buff="";int a;int b;
        int ch=0;
        for( ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(SEP_PARAMETERS)){
                ch++;
                break;
            }
        }
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(SEP_PARAMETERS)){
                ch++;
                break;
            }else{
                buff=buff+String.valueOf(code.charAt(ch));
            }
        }
        a = Integer.parseInt(buff);buff="";
        for(ch=ch;ch<code.length();ch++){
            if(String.valueOf(code.charAt(ch)).equals(COMMAND_SEP)){
                break;
            }else{
                buff=buff+String.valueOf(code.charAt(ch));
            }
        }
        b=Integer.parseInt(buff);
        makeSureShelfArrayIsLongEnough(Math.max(a,b));
        try{
           boolean s = (shelfContents[a][1].equals("")||shelfContents[b][1].equals(""));
           if(s==true){
            JOptionPane.showMessageDialog(this, "ADD command can not be called on an empty shelf");
            return true;               
           }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "ADD command can not be called on an empty shelf");
            return true;
        }
        String[]aVal=shelfContents[a][1].split(SEP_BOXES);
        String[]bVal=shelfContents[b][1].split(SEP_BOXES);
        String results []=new String[aVal.length*bVal.length];
        int point=0;
        for(int in=0;in<aVal.length;in++){
            for(int j=0;j<bVal.length;j++){
                int add=Integer.parseInt(aVal[in])+Integer.parseInt(bVal[j]);
                results[point]=String.valueOf(add);
                point++;
            }
        }
        String n=results[0];
        for(int i=1;i<results.length;i++){
            n=n+SEP_BOXES+results[i];
        }
        shelfContents[0][1]=n;
        return false;
    }
    JOptionPane.showMessageDialog(this,"An unkown error has occured");
    return true;
}
public void makeSureShelfArrayIsLongEnough(int maxIndex){
    String newShelf [][]= new String[Math.max(maxIndex+1,shelfContents.length)][2];
    for(int y=0;y<shelfContents.length;y++){
        newShelf[y][0]=shelfContents[y][0];
        newShelf[y][1]=shelfContents[y][1];
    }
    for(int y=shelfContents.length;y<newShelf.length;y++){
        newShelf[y][0]=String.valueOf(y);
    }
    shelfContents=newShelf;
}

    public boolean hasAnIfStatementOnLine(String line){
                for(int c=0;c<line.length();c++){
            if(line.charAt(c)==IF_OPEN_CHAR){
                return true;
            }else if(line.charAt(c)==IF_CLOSE_CHAR){
                return true;
            }
        }
                return false;
    }
    public boolean ifZero(){
        try{
            if(shelfContents[0][1].equals("0")){
                return true;
            }
        }catch(Exception e){
            return false;
        }
        String[] z = shelfContents[0][1].split(SEP_BOXES);
        for(int y=0;y<z.length;y++){
                if(z[y].equals("0")){
                    return true;
                }
        }
        return false;
    }
    public  boolean areIfsOnCurrentLineEnded(){
        String txt =commandsArea.getText();
        String[] a = txt.split(System.lineSeparator());
        String lastLine = a[a.length-1];
        int noOpened=0;int noClosed=0;
        for(int c=0;c<lastLine.length();c++){
            if(lastLine.charAt(c)==IF_OPEN_CHAR){
                noOpened=noOpened+1;
            }else if(lastLine.charAt(c)==IF_CLOSE_CHAR){
                noClosed= noClosed+1;
            }
        }
        return noOpened==noClosed;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ALU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ALU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ALU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ALU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ALU().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton absBtn;
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField addShelfATxt;
    private javax.swing.JTextField addShelfBTxt;
    private javax.swing.JTextArea commandsArea;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton haltBtn;
    private javax.swing.JButton if0FalseBtn;
    private javax.swing.JButton if0TrueBtn;
    private javax.swing.JButton infortmationBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField lineNoTxt;
    private javax.swing.JButton loadBtn;
    private javax.swing.JTextField loadTxt;
    private javax.swing.JButton loopToLineBtn;
    private javax.swing.JButton negBtn;
    private javax.swing.JTextField negShelfTxt;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton runBtn;
    private javax.swing.JTable shelfTable;
    private javax.swing.JButton swapBtn;
    private javax.swing.JTextField swapShelfATxt;
    private javax.swing.JTextField swapShelfBTxt;
    private javax.swing.JButton xPlusY;
    private javax.swing.JButton xTimesYBtn;
    // End of variables declaration//GEN-END:variables
}
